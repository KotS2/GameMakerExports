/// Object : obj_MainMenu | Step_0




bg_t += 0.02;
slide = lerp(slide, slide_target, 0.2);

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

// Root hover (slide konumuna göre)
var over = -1;
for (var i = 0; i < array_length(items); i++) {
    var y1 = first_y - slide * slide_px + i * (bar_h + gap);
    var y2 = y1 + bar_h;

    var h = items[i].hover;
    var expand = h * 6;
    var y1h = y1 - expand * 0.5;
    var y2h = y2 + expand * 0.5;

    if (mx >= x1 && mx <= x2 && my >= y1h && my <= y2h) { over = i; break; }
}

// Hover animasyonu & sheen
for (var i = 0; i < array_length(items); i++) {
    var target = (state == "root" && i == over) ? 1 : 0;
    items[i].hover = lerp(items[i].hover, target, 0.18);
    if (state == "root" && i == over) {
        items[i].sheen += 0.028;
        if (items[i].sheen > 1.25) items[i].sheen = -0.35;
    } else {
        items[i].sheen = max(items[i].sheen - 0.05, -0.35);
    }
}

// --- Panel dikdörtgenleri (scroll dahil) ---
var panel_x1 = x1 + 16;
var panel_x2 = x2 - 16;
var raw_panel_y1 = first_y - slide * slide_px + (open_index + 1) * (bar_h + gap) + 6;
var panel_y1 = raw_panel_y1 - (state == "load" ? load_scroll : (state == "options" ? opt_scroll : 0));
var content_h = (state == "load") ? (global.save_slots * 56 + 18 + footer_h): (8*42 + 36 + footer_h);
var panel_y2 = panel_y1 + content_h;

// --- Panel dışına tık: kapat ---
if (state != "root" && mouse_check_button_pressed(mb_left)) {
    if (!(mx >= panel_x1 && mx <= panel_x2 && my >= panel_y1 && my <= panel_y2)) {
        state        = "root";
        slide_target = 0;
        open_index   = -1;
        drag_slider  = -1;
        exit;
    }
}

// --- Mouse left ana işleyiş ---
if (mouse_check_button_pressed(mb_left)) {
    if (state == "root" && over != -1 && items[over].enabled) {
        var key = items[over].key;
        if (key == "Load" || key == "Options") {
            state        = (key == "Load") ? "load" : "options";
            open_index   = over;
            slide_target = 1;
        } else {
            menu_activate(over);
        }
    }
    else if (state == "load") {
        // Slot tık (scroll dahil)
        var xL = x1 + 24;
        var xR = x2 - 24;
        var y_top = panel_y1 + 8; // scroll'lu panel_y1 kullanılıyor
        for (var s = 0; s < global.save_slots; s++) {
            var sy1 = y_top + s * 56;
            var sy2 = sy1 + 48;
            if (mx >= xL && mx <= xR && my >= sy1 && my <= sy2) {
                if (!is_undefined(global.save_data[s])) {
                    scr_load_game(s);
                }
            }
        }
    }
    else if (state == "options") {
        // Layout (scroll dahil)
        var y0    = panel_y1 + 18;
        var row_h = 42;

        // --- Slider mousedown: drag başlat ---
        for (var r = 0; r < 4; r++) {
            var sy1 = y0 + r*row_h;
            var sy2 = sy1 + 28;
            var sx1 = panel_x1 + 220;
            var sx2 = panel_x2 - 20;

            if (mx >= sx1 && mx <= sx2 && my >= sy1 && my <= sy2) {
                drag_slider = r;
            }
        }

        // --- Fullscreen toggle ---
        var fs_x1 = panel_x1 + 220;
        var fs_x2 = fs_x1 + 28;
        var fs_y1 = y0 + 4*row_h;
        var fs_y2 = fs_y1 + 28;
        if (mx >= fs_x1 && mx <= fs_x2 && my >= fs_y1 && my <= fs_y2) {
            global.opt_fullscreen = !global.opt_fullscreen;
            global.scr_apply_resolution();
            global.scr_save_options();
        }

        // --- Oklar: çözünürlük / diller ---
        var res_y = y0 + 5*row_h + 14;
        var sub_y = y0 + 6*row_h + 14;
        var voi_y = y0 + 7*row_h + 14;

        var left_x1  = panel_x1 + 220;
        var left_x2  = left_x1 + 24;
        var right_x2 = panel_x2 - 20;
        var right_x1 = right_x2 - 24;

        // RES
        if (my >= res_y-12 && my <= res_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                var max_i = array_length(global.res_list)-1;
                global.opt_res_index = (global.opt_res_index - 1 + (max_i+1)) mod (max_i+1);
                global.scr_apply_resolution();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                var max_i2 = array_length(global.res_list)-1;
                global.opt_res_index = (global.opt_res_index + 1) mod (max_i2+1);
                global.scr_apply_resolution();
                global.scr_save_options();
            }
        }

        // SUB
        if (my >= sub_y-12 && my <= sub_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                global.opt_sub_lang = global.scr_prev_lang(global.opt_sub_lang);
                global.scr_reload_lang_files();
                if (instance_exists(obj_MainMenu)) with (obj_MainMenu) refresh_labels();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                global.opt_sub_lang = global.scr_next_lang(global.opt_sub_lang);
                global.scr_reload_lang_files();
                if (instance_exists(obj_MainMenu)) with (obj_MainMenu) refresh_labels();
                global.scr_save_options();
            }
        }

        // VOI
        if (my >= voi_y-12 && my <= voi_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                global.opt_voi_lang = global.scr_prev_lang(global.opt_voi_lang);
                global.scr_reload_lang_files();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                global.opt_voi_lang = global.scr_next_lang(global.opt_voi_lang);
                global.scr_reload_lang_files();
                global.scr_save_options();
            }
        }
    }
}

// --- Slider drag (basılıyken) ---
if (state == "options" && drag_slider >= 0 && mouse_check_button(mb_left)) {
    var y0    = panel_y1 + 18;
    var row_h = 42;
    var r = drag_slider;
    var sx1 = panel_x1 + 220;
    var sx2 = panel_x2 - 20;

    var t = (mx - sx1) / max(1,(sx2 - sx1));
    var v = clamp(t, 0, 1);
    switch (r) {
        case 0: global.opt_music = v; break;
        case 1: global.opt_voi   = v; break;
        case 2: global.opt_sfx   = v; break;
        case 3: global.opt_amb   = v; break;
    }
    global.scr_save_options();
}
if (mouse_check_button_released(mb_left)) drag_slider = -1;

// --- ESC / sağ tık ile root’a dön ---
if (keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right)) {
    state        = "root";
    slide_target = 0;
    open_index   = -1;
    drag_slider  = -1;
}

// --- Klavye navigasyon ---
if (state == "root") {
    if (keyboard_check_pressed(vk_up)) {
        repeat(array_length(items)) { sel = (sel-1+array_length(items)) mod array_length(items); if (items[sel].enabled) break; }
    }
    if (keyboard_check_pressed(vk_down)) {
        repeat(array_length(items)) { sel = (sel+1) mod array_length(items); if (items[sel].enabled) break; }
    }
    if (keyboard_check_pressed(vk_enter)) {
        var key = items[sel].key;
        if (key == "Load" || key == "Options") {
            state        = (key == "Load") ? "load" : "options";
            open_index   = sel;
            slide_target = 1;
        } else {
            menu_activate(sel);
        }
    }
}

// --- OK hover bayrakları (options'ta) ---
if (state == "options") {
    var y0    = panel_y1 + 18;
    var row_h = 42;

    var res_y = y0 + 5*row_h + 14;
    var sub_y = y0 + 6*row_h + 14;
    var voi_y = y0 + 7*row_h + 14;

    var left_x1  = panel_x1 + 220;
    var left_x2  = left_x1 + 24;
    var right_x2 = panel_x2 - 20;
    var right_x1 = right_x2 - 24;

    hover_res_left  = (my >= res_y-12 && my <= res_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_res_right = (my >= res_y-12 && my <= res_y+12 && mx >= right_x1 && mx <= right_x2);
    hover_sub_left  = (my >= sub_y-12 && my <= sub_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_sub_right = (my >= sub_y-12 && my <= sub_y+12 && mx >= right_x1 && mx <= right_x2);
    hover_voi_left  = (my >= voi_y-12 && my <= voi_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_voi_right = (my >= voi_y-12 && my <= voi_y+12 && mx >= right_x1 && mx <= right_x2);
} else {
    hover_res_left=hover_res_right=hover_sub_left=hover_sub_right=hover_voi_left=hover_voi_right=false;
}
"
/// obj_MainMenu.Step

bg_t += 0.02;
slide = lerp(slide, slide_target, 0.2);

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

// Root hover (slide konumuna göre)
var over = -1;
for (var i = 0; i < array_length(items); i++) {
    var y1 = first_y - slide * slide_px + i * (bar_h + gap);
    var y2 = y1 + bar_h;

    var h = items[i].hover;
    var expand = h * 6;
    var y1h = y1 - expand * 0.5;
    var y2h = y2 + expand * 0.5;

    if (mx >= x1 && mx <= x2 && my >= y1h && my <= y2h) { over = i; break; }
}

// Hover animasyonu & sheen
for (var i = 0; i < array_length(items); i++) {
    var target = (state == "root" && i == over) ? 1 : 0;
    items[i].hover = lerp(items[i].hover, target, 0.18);
    if (state == "root" && i == over) {
        items[i].sheen += 0.028;
        if (items[i].sheen > 1.25) items[i].sheen = -0.35;
    } else {
        items[i].sheen = max(items[i].sheen - 0.05, -0.35);
    }
}

// --- Panel dikdörtgenleri (scroll dahil) ---
var panel_x1 = x1 + 16;
var panel_x2 = x2 - 16;
var raw_panel_y1 = first_y - slide * slide_px + (open_index + 1) * (bar_h + gap) + 6;
var panel_y1 = raw_panel_y1 - (state == "load" ? load_scroll : (state == "options" ? opt_scroll : 0));
var content_h = (state == "load") ? (global.save_slots * 56 + 18 + footer_h): (8*42 + 36 + footer_h);
var panel_y2 = panel_y1 + content_h;

// --- Panel dışına tık: kapat ---
if (state != "root" && mouse_check_button_pressed(mb_left)) {
    if (!(mx >= panel_x1 && mx <= panel_x2 && my >= panel_y1 && my <= panel_y2)) {
        state        = "root";
        slide_target = 0;
        open_index   = -1;
        drag_slider  = -1;
        exit;
    }
}

// --- Mouse left ana işleyiş ---
if (mouse_check_button_pressed(mb_left)) {
    if (state == "root" && over != -1 && items[over].enabled) {
        var key = items[over].key;
        if (key == "Load" || key == "Options") {
            state        = (key == "Load") ? "load" : "options";
            open_index   = over;
            slide_target = 1;
        } else {
            menu_activate(over);
        }
    }
    else if (state == "load") {
        // Slot tık (scroll dahil)
        var xL = x1 + 24;
        var xR = x2 - 24;
        var y_top = panel_y1 + 8; // scroll'lu panel_y1 kullanılıyor
        for (var s = 0; s < global.save_slots; s++) {
            var sy1 = y_top + s * 56;
            var sy2 = sy1 + 48;
            if (mx >= xL && mx <= xR && my >= sy1 && my <= sy2) {
                if (!is_undefined(global.save_data[s])) {
                    scr_load_game(s);
                }
            }
        }
    }
    else if (state == "options") {
        // Layout (scroll dahil)
        var y0    = panel_y1 + 18;
        var row_h = 42;

        // --- Slider mousedown: drag başlat ---
        for (var r = 0; r < 4; r++) {
            var sy1 = y0 + r*row_h;
            var sy2 = sy1 + 28;
            var sx1 = panel_x1 + 220;
            var sx2 = panel_x2 - 20;

            if (mx >= sx1 && mx <= sx2 && my >= sy1 && my <= sy2) {
                drag_slider = r;
            }
        }

        // --- Fullscreen toggle ---
        var fs_x1 = panel_x1 + 220;
        var fs_x2 = fs_x1 + 28;
        var fs_y1 = y0 + 4*row_h;
        var fs_y2 = fs_y1 + 28;
        if (mx >= fs_x1 && mx <= fs_x2 && my >= fs_y1 && my <= fs_y2) {
            global.opt_fullscreen = !global.opt_fullscreen;
            global.scr_apply_resolution();
            global.scr_save_options();
        }

        // --- Oklar: çözünürlük / diller ---
        var res_y = y0 + 5*row_h + 14;
        var sub_y = y0 + 6*row_h + 14;
        var voi_y = y0 + 7*row_h + 14;

        var left_x1  = panel_x1 + 220;
        var left_x2  = left_x1 + 24;
        var right_x2 = panel_x2 - 20;
        var right_x1 = right_x2 - 24;

        // RES
        if (my >= res_y-12 && my <= res_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                var max_i = array_length(global.res_list)-1;
                global.opt_res_index = (global.opt_res_index - 1 + (max_i+1)) mod (max_i+1);
                global.scr_apply_resolution();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                var max_i2 = array_length(global.res_list)-1;
                global.opt_res_index = (global.opt_res_index + 1) mod (max_i2+1);
                global.scr_apply_resolution();
                global.scr_save_options();
            }
        }

        // SUB
        if (my >= sub_y-12 && my <= sub_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                global.opt_sub_lang = global.scr_prev_lang(global.opt_sub_lang);
                global.scr_reload_lang_files();
                if (instance_exists(obj_MainMenu)) with (obj_MainMenu) refresh_labels();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                global.opt_sub_lang = global.scr_next_lang(global.opt_sub_lang);
                global.scr_reload_lang_files();
                if (instance_exists(obj_MainMenu)) with (obj_MainMenu) refresh_labels();
                global.scr_save_options();
            }
        }

        // VOI
        if (my >= voi_y-12 && my <= voi_y+12) {
            if (mx >= left_x1 && mx <= left_x2) {
                global.opt_voi_lang = global.scr_prev_lang(global.opt_voi_lang);
                global.scr_reload_lang_files();
                global.scr_save_options();
            } else if (mx >= right_x1 && mx <= right_x2) {
                global.opt_voi_lang = global.scr_next_lang(global.opt_voi_lang);
                global.scr_reload_lang_files();
                global.scr_save_options();
            }
        }
    }
}

// --- Slider drag (basılıyken) ---
if (state == "options" && drag_slider >= 0 && mouse_check_button(mb_left)) {
    var y0    = panel_y1 + 18;
    var row_h = 42;
    var r = drag_slider;
    var sx1 = panel_x1 + 220;
    var sx2 = panel_x2 - 20;

    var t = (mx - sx1) / max(1,(sx2 - sx1));
    var v = clamp(t, 0, 1);
    switch (r) {
        case 0: global.opt_music = v; break;
        case 1: global.opt_voi   = v; break;
        case 2: global.opt_sfx   = v; break;
        case 3: global.opt_amb   = v; break;
    }
    global.scr_save_options();
}
if (mouse_check_button_released(mb_left)) drag_slider = -1;

// --- ESC / sağ tık ile root’a dön ---
if (keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_right)) {
    state        = "root";
    slide_target = 0;
    open_index   = -1;
    drag_slider  = -1;
}

// --- Klavye navigasyon ---
if (state == "root") {
    if (keyboard_check_pressed(vk_up)) {
        repeat(array_length(items)) { sel = (sel-1+array_length(items)) mod array_length(items); if (items[sel].enabled) break; }
    }
    if (keyboard_check_pressed(vk_down)) {
        repeat(array_length(items)) { sel = (sel+1) mod array_length(items); if (items[sel].enabled) break; }
    }
    if (keyboard_check_pressed(vk_enter)) {
        var key = items[sel].key;
        if (key == "Load" || key == "Options") {
            state        = (key == "Load") ? "load" : "options";
            open_index   = sel;
            slide_target = 1;
        } else {
            menu_activate(sel);
        }
    }
}

// --- OK hover bayrakları (options'ta) ---
if (state == "options") {
    var y0    = panel_y1 + 18;
    var row_h = 42;

    var res_y = y0 + 5*row_h + 14;
    var sub_y = y0 + 6*row_h + 14;
    var voi_y = y0 + 7*row_h + 14;

    var left_x1  = panel_x1 + 220;
    var left_x2  = left_x1 + 24;
    var right_x2 = panel_x2 - 20;
    var right_x1 = right_x2 - 24;

    hover_res_left  = (my >= res_y-12 && my <= res_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_res_right = (my >= res_y-12 && my <= res_y+12 && mx >= right_x1 && mx <= right_x2);
    hover_sub_left  = (my >= sub_y-12 && my <= sub_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_sub_right = (my >= sub_y-12 && my <= sub_y+12 && mx >= right_x1 && mx <= right_x2);
    hover_voi_left  = (my >= voi_y-12 && my <= voi_y+12 && mx >= left_x1  && mx <= left_x2);
    hover_voi_right = (my >= voi_y-12 && my <= voi_y+12 && mx >= right_x1 && mx <= right_x2);
} else {
    hover_res_left=hover_res_right=hover_sub_left=hover_sub_right=hover_voi_left=hover_voi_right=false;
}